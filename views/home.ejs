<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <!-- Axios ve Web3 kütüphanelerini ekliyoruz -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
            color: #333;
        }

        h1 {
            color: #4CAF50;
            text-align: center;
        }

        h2 {
            margin-top: 20px;
        }

        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        p {
            line-height: 1.6;
        }

        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            margin: 10px 0;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: #45a049;
        }

        .alert {
            color: #d9534f; /* Kırmızı ton */
            margin-top: 10px;
            text-align: center;
        }

        .message {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-top: 20px;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>Hoş Geldiniz</h1>
        <h2>Kullanıcı Bilgileri</h2>
        <p><strong>Email:</strong> <%= typeof response !== 'undefined' ? response.email : 'N/A' %></p>
        <p><strong>Rol:</strong> <%= typeof response !== 'undefined' ? response.role : 'N/A' %></p>
        
        <button id="twitterButton">Twitter Hesabı Ekle</button>
        
        <h3>MetaMask Bağlantısı</h3>
        <button type="button" id="connectMetamask">MetaMask'i Bağla</button>

        <div class="message">
            <p>MetaMask ile cüzdanınızı bağlayın ve Twitter hesabınızı ekleyin!</p>
        </div>

        <div class="alert" id="error-message" style="display: none;"></div>
    </div>

    <script>
        // Twitter butonuna tıklama olayı
        document.getElementById('twitterButton').addEventListener('click', function () {
            const token = "<%= typeof token !== 'undefined' ? token : '' %>";
            if (token) {
                axios.post('/twitter/add', {}, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                }).then(response => {
                    const redirectUrl = response.data.redirectUrl;
                    window.location.href = redirectUrl;
                }).catch(error => {
                    console.error(error);
                    showError("Bir hata oluştu. Lütfen tekrar deneyin.");
                });
            } else {
                showError("Token tanımlı değil.");
            }
        });

        async function connectMetamask() {
            const token = "<%= typeof token !== 'undefined' ? token : '' %>";

            if (window.ethereum) {
                try {
                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                    const userAccount = accounts[0];
                    const response = await axios.post('/metamask/nonce', { userAccount }, {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    const nonce = response.data.signedMessage;
                    const publicKey = response.data.publicKey;

                    const msgParams = JSON.stringify({
                        domain: {
                            chainId: 1,
                            name: 'legit',
                            verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
                            version: '1',
                        },
                        message: {
                            Mesaj: `
Hoş Geldiniz!
Cüzdanınızı Midle ile bağlamak için 'İmzala' butonuna tıklayın.
Bu istek herhangi bir blockchain işlemini tetiklemez veya gaz ücreti talep etmez.

Cüzdan adresi:
${userAccount}

Nonce:
${nonce}
`,
                            from: {
                                name: "Legit",
                                wallets: [userAccount],
                            },
                        },
                        primaryType: 'Mail',
                        types: {
                            EIP712Domain: [
                                { name: 'name', type: 'string' },
                                { name: 'version', type: 'string' },
                                { name: 'chainId', type: 'uint256' },
                                { name: 'verifyingContract', type: 'address' },
                            ],
                            Mail: [
                                { name: 'Mesaj', type: 'string' },
                                { name: 'from', type: 'Person' },
                            ],
                            Person: [
                                { name: "name", type: "string" },
                                { name: "wallets", type: "address[]" },
                            ],
                        },
                    });
                    const signature = await window.ethereum.request({
                        method: 'eth_signTypedData_v4',
                        params: [userAccount, msgParams],
                    });

                    axios.post('/metamask/add', {
                        nonce: nonce,
                        walletAddress: userAccount,
                        publicKey: publicKey
                    }, {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    }).then(response => {
                        console.log("Backend'den gelen yanıt:", response);
                    }).catch(error => {
                        console.error("Hata:", error);
                    });
                } catch (error) {
                    console.error("Kullanıcı MetaMask isteğini reddetti:", error);
                    showError("MetaMask isteği reddedildi.");
                }
            } else {
                alert("Lütfen MetaMask'i kurun.");
            }
        }

        // MetaMask bağlantısını başlatmak için buton
        document.getElementById('connectMetamask').addEventListener('click', connectMetamask);

        // Hata mesajlarını gösterme fonksiyonu
        function showError(message) {
            const errorMessage = document.getElementById('error-message');
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }
    </script>
</body>

</html>
