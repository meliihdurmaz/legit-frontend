<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Legit Home Page</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f4f8;
        }

        h1 {
            margin-bottom: 20px;
        }

        .button {
            background-color: #007bff;
            /* Bootstrap primary color */
            color: white;
            border: none;
            border-radius: 5px;
            padding: 15px 30px;
            margin: 10px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .button:hover {
            background-color: #0056b3;
            /* Darker shade on hover */
        }

        .button:focus {
            outline: none;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>

<body>
    <h1>Legit Home Page</h1>
    <button class="button" onclick="loginWithTelegram()">Telegram ile Giriş</button>
    <button class="button" onclick="loginWithTwitter()">Twitter ile Giriş</button>
    <button class="button" onclick="loginWithMetaMask()">MetaMask ile Giriş</button>

    <script>
        function loginWithTelegram() {
            axios.get('/login/telegram', {}, {
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => {
                console.log(response);
                const redirectUrl = response.data.redirectUrl; // Yönlendirme URL'sini al
                // console.log(redirectUrl);
                window.location.href = redirectUrl;  // Yönlendirme yap
            }).catch(error => {
                console.error(error);
            });
            // Telegram login logic here
            // alert("Telegram ile giriş yapılıyor...");
        }

        function loginWithTwitter() {
            axios.get('/home/twitter/login', {})
            .then(response => {
                const redirectUrl = response.data.redirectUrl;
                window.location.href=redirectUrl;
            }).catch(error => {
                console.error(error);
                showError("Bir hata oluştu. Lütfen tekrar deneyin.");
            });
            alert("Twitter ile giriş yapılıyor...");
        }

        async function loginWithMetaMask() {
            if (window.ethereum) {
                try {
                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                    console.log("Kullanıcı MetaMask isteğini kabul etti:", accounts);
                    const userAccount = accounts[0];
                    const response = await axios.post('/metamask/nonce', { userAccount }, {
                    });
                    const nonce = response.data.signedMessage;
                    const publicKey = response.data.publicKey;

                    const msgParams = JSON.stringify({
                        domain: {
                            chainId: 1,
                            name: 'legit',
                            verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
                            version: '1',
                        },
                        message: {
                            Mesaj: `
Hoş Geldiniz!
Cüzdanınızı Midle ile bağlamak için 'İmzala' butonuna tıklayın.
Bu istek herhangi bir blockchain işlemini tetiklemez veya gaz ücreti talep etmez.

Cüzdan adresi:
${userAccount}

Nonce:
${nonce}
`,
                            from: {
                                name: "Legit",
                                wallets: [userAccount],
                            },
                        },
                        primaryType: 'Mail',
                        types: {
                            EIP712Domain: [
                                { name: 'name', type: 'string' },
                                { name: 'version', type: 'string' },
                                { name: 'chainId', type: 'uint256' },
                                { name: 'verifyingContract', type: 'address' },
                            ],
                            Mail: [
                                { name: 'Mesaj', type: 'string' },
                                { name: 'from', type: 'Person' },
                            ],
                            Person: [
                                { name: "name", type: "string" },
                                { name: "wallets", type: "address[]" },
                            ],
                        },
                    });
                    const signature = await window.ethereum.request({
                        method: 'eth_signTypedData_v4',
                        params: [userAccount, msgParams],
                    });

                    axios.post('/metamask/login', {
                        nonce: nonce,
                        walletAddress: userAccount,
                        publicKey: publicKey
                    }).then(response => {
                        console.log("Başarılı:", response.data);
                        window.location.href = '/home?token=' + encodeURIComponent(response.data.replace(/"/g, ''));
                    }).catch(error => {
                        if (error.response) {
                            // Server responded with a status other than 2xx
                            console.error("Hata:", error.response.data);
                            console.error("Durum Kodu:", error.response.status);
                        } else if (error.request) {
                            // Request was made but no response received
                            console.error("Sunucuya istek yapıldı, ancak yanıt alınamadı:", error.request);
                        } else {
                            // Something happened in setting up the request
                            console.error("Hata:", error.message);
                        }
                    });
                } catch (error) {
                    console.error("Kullanıcı MetaMask isteğini reddetti:", error);
                    showError("MetaMask isteği reddedildi.");
                }
            } else {
                alert("Lütfen MetaMask'i kurun.");
            }
        }
    </script>
</body>

</html>